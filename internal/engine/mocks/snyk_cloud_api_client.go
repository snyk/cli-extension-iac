// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/martinguibert/Sources/cli-extension-iac/internal/engine/snyk_cloud_resource_resolver.go

// Package mock_engine is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	cloudapi "github.com/snyk/cli-extension-iac/internal/cloudapi"
)

// MocksnykCloudApiClient is a mock of snykCloudApiClient interface.
type MocksnykCloudApiClient struct {
	ctrl     *gomock.Controller
	recorder *MocksnykCloudApiClientMockRecorder
}

// MocksnykCloudApiClientMockRecorder is the mock recorder for MocksnykCloudApiClient.
type MocksnykCloudApiClientMockRecorder struct {
	mock *MocksnykCloudApiClient
}

// NewMocksnykCloudApiClient creates a new mock instance.
func NewMocksnykCloudApiClient(ctrl *gomock.Controller) *MocksnykCloudApiClient {
	mock := &MocksnykCloudApiClient{ctrl: ctrl}
	mock.recorder = &MocksnykCloudApiClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocksnykCloudApiClient) EXPECT() *MocksnykCloudApiClientMockRecorder {
	return m.recorder
}

// Resources mocks base method.
func (m *MocksnykCloudApiClient) Resources(ctx context.Context, orgID, environementID, resourceType, resourceKind string) ([]cloudapi.ResourceObject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resources", ctx, orgID, environementID, resourceType, resourceKind)
	ret0, _ := ret[0].([]cloudapi.ResourceObject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Resources indicates an expected call of Resources.
func (mr *MocksnykCloudApiClientMockRecorder) Resources(ctx, orgID, environementID, resourceType, resourceKind interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resources", reflect.TypeOf((*MocksnykCloudApiClient)(nil).Resources), ctx, orgID, environementID, resourceType, resourceKind)
}
